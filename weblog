<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MiniHub â€” HTML Demo</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f6f8fa;
      margin: 0;
      color: #24292f;
    }
    header {
      background: white;
      border-bottom: 1px solid #e1e4e8;
      padding: 1rem 2rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 2px 4px rgba(0,0,0,0.04);
    }
    .logo {
      font-weight: bold;
      font-size: 1.2rem;
      background: linear-gradient(135deg,#6366f1,#ec4899);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    nav button {
      border: none;
      background: none;
      font-size: 0.95rem;
      cursor: pointer;
      margin: 0 0.5rem;
      padding: 0.4rem 0.8rem;
      border-radius: 6px;
      transition: 0.2s;
    }
    nav button:hover, nav button.active {
      background: #f3f4f6;
    }
    main {
      max-width: 1000px;
      margin: 2rem auto;
      display: grid;
      grid-template-columns: 1fr 2fr 1fr;
      gap: 1.5rem;
    }
    aside, section {
      background: white;
      border-radius: 12px;
      padding: 1rem;
      box-shadow: 0 1px 4px rgba(0,0,0,0.08);
    }
    h2 {
      margin-top: 0;
      font-size: 1.2rem;
    }
    .repo, .post {
      border-bottom: 1px solid #eee;
      padding: 0.5rem 0;
    }
    .repo:last-child, .post:last-child { border-bottom: none; }
    .btn {
      display: inline-block;
      background: #6366f1;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      cursor: pointer;
      transition: 0.2s;
    }
    .btn:hover { background: #4f46e5; }
    .modal {
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.5);
      display: none;
      align-items: center;
      justify-content: center;
    }
    .modal-content {
      background: white;
      padding: 1.5rem;
      border-radius: 12px;
      width: 90%;
      max-width: 400px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
      animation: pop 0.25s ease;
    }
    @keyframes pop {
      from { transform: scale(0.9); opacity: 0; }
      to { transform: scale(1); opacity: 1; }
    }
    input, textarea {
      width: 100%;
      padding: 0.5rem;
      margin: 0.4rem 0;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-family: inherit;
    }
  </style>
</head>
<body>
  <header>
    <div class="logo">MiniHub</div>
    <nav>
      <button class="active" id="feedBtn">Feed</button>
      <button id="reposBtn">Repositories</button>
      <button id="blogBtn">Blog</button>
    </nav>
  </header>

  <main>
    <aside>
      <h2>Profile</h2>
      <p><strong>Albert</strong><br/><small>Frontend tinkerer</small></p>
      <button class="btn" id="newRepoBtn">+ New Repo</button>
      <button class="btn" style="margin-top:0.5rem;background:#ec4899;" id="newPostBtn">+ New Post</button>
    </aside>

    <section id="content"></section>

    <aside>
      <h2>Stats</h2>
      <p><strong id="repoCount">0</strong> Repositories</p>
      <p><strong id="postCount">0</strong> Posts</p>
    </aside>
  </main>

  <!-- Modal -->
  <div class="modal" id="modal">
    <div class="modal-content">
      <h3 id="modalTitle">Create</h3>
      <input id="modalInput1" placeholder="Title or Name" />
      <textarea id="modalInput2" rows="4" placeholder="Description or Body"></textarea>
      <div style="text-align:right; margin-top:0.5rem;">
        <button onclick="closeModal()">Cancel</button>
        <button class="btn" onclick="saveModal()">Save</button>
      </div>
    </div>
  </div>

  <script>
    const content = document.getElementById('content');
    const repoCount = document.getElementById('repoCount');
    const postCount = document.getElementById('postCount');

    let repos = [];
    let posts = [];
    let currentView = 'feed';
    let currentType = null;

    const feedBtn = document.getElementById('feedBtn');
    const reposBtn = document.getElementById('reposBtn');
    const blogBtn = document.getElementById('blogBtn');

    feedBtn.onclick = () => setView('feed');
    reposBtn.onclick = () => setView('repos');
    blogBtn.onclick = () => setView('blog');

    function setView(v) {
      currentView = v;
      [feedBtn, reposBtn, blogBtn].forEach(b => b.classList.remove('active'));
      if(v==='feed') feedBtn.classList.add('active');
      if(v==='repos') reposBtn.classList.add('active');
      if(v==='blog') blogBtn.classList.add('active');
      render();
    }

    function render() {
      if (currentView === 'feed') {
        content.innerHTML = `<h2>Recent activity</h2>` +
          repos.map(r => `<div class='repo'><strong>${r.name}</strong><br><small>${r.desc}</small></div>`).join('') +
          posts.map(p => `<div class='post'><strong>${p.title}</strong><br><small>${p.body.slice(0,80)}...</small></div>`).join('');
      } else if (currentView === 'repos') {
        content.innerHTML = `<h2>Repositories</h2>` +
          repos.map(r => `<div class='repo'><strong>${r.name}</strong><br><small>${r.desc}</small></div>`).join('');
      } else {
        content.innerHTML = `<h2>Blog Posts</h2>` +
          posts.map(p => `<div class='post'><strong>${p.title}</strong><br><small>${p.body.slice(0,80)}...</small></div>`).join('');
      }
      repoCount.textContent = repos.length;
      postCount.textContent = posts.length;
    }

    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modalTitle');
    const input1 = document.getElementById('modalInput1');
    const input2 = document.getElementById('modalInput2');

    document.getElementById('newRepoBtn').onclick = () => openModal('repo');
    document.getElementById('newPostBtn').onclick = () => openModal('post');

    function openModal(type){
      currentType = type;
      modalTitle.textContent = type==='repo' ? 'Create Repository' : 'New Post';
      input1.value = '';
      input2.value = '';
      modal.style.display = 'flex';
    }
    function closeModal(){ modal.style.display = 'none'; }

    function saveModal(){
      const v1 = input1.value.trim();
      const v2 = input2.value.trim();
      if(!v1) return;
      if(currentType==='repo') repos.unshift({name:v1, desc:v2});
      else posts.unshift({title:v1, body:v2});
      closeModal();
      render();
    }

    render();
  </script>
</body>
</html>
